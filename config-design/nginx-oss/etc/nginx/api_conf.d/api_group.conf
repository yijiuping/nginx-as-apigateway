# Warehouse API
#

# Rewrite rules
#
rewrite ^/api/warehouse/inventory/item/price  /api/warehouse/pricing;
rewrite_log off;

location /api/warehouse/ {

    # Policy configuration here (authentication, rate limiting, logging...)
    #

    # Keepalive connection
    proxy_http_version 1.1;
    proxy_set_header Connection '';
    proxy_set_header Host      $host:$server_port;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Logging
    access_log /var/log/nginx/warehouse_api.log main;

    # API Key authentication
    auth_request /_validate_apikey;

    # HTTP Basic authentication, need to restart nginx service to enforce
#     auth_basic           "Please input username and password";
#     auth_basic_user_file  /etc/nginx/conf.d/htpasswd;

    # Limit the body size
    client_max_body_size 16k;

    # Rate limiting
    limit_req zone=client_ip_10rs;
    limit_req_status 429;

    # Compression
	gzip on;
	gzip_min_length 1k;
	gzip_buffers 16 64k;
	gzip_http_version 1.1;
	gzip_comp_level 4;
	gzip_types text/plain application/x-javascript text/css application/xml application/json;
	gzip_vary on;
	gzip_disable msie6;
	gzip_proxied any;

    # URI routing
    #
    location /api/warehouse/inventory {
        limit_except GET {
            deny all;
        }

        error_page 403 = @405; # Convert deny response from '403 (Forbidden)' to '405 (Method Not Allowed)'

        # Enable API Response cache. TIPS: should start nginx with non root user
        proxy_cache api_cache;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 3;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;

        proxy_cache_valid any 10m;
        proxy_cache_key $scheme$proxy_host$request_uri;

        proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie;
        add_header X-Proxy-Cache $upstream_cache_status;

        # Traffic Mirroring
        mirror /api/warehouse/inventory_mirror;

        proxy_pass http://$warehouse_inventory_upstream;
    }

    location = /api/warehouse/inventory_mirror {
        internal;
        proxy_pass http://warehouse_pricing$request_uri; # $request_uri必须要带上，否则复制过来会丢掉

        proxy_pass_request_body on;
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Content-Length "";
        proxy_set_header Host      $host:$server_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Client Authorization
    location = /api/warehouse/inventory/audit {
        if ($is_infrastructure = 0) {
            return 403; # Forbidden (not infrastructure)
        }
        proxy_pass http://$warehouse_inventory_upstream;
    }

    location /api/warehouse/pricing {
        limit_except GET PATCH {
            deny all;
        }

        error_page 403 = @405;

        # Body validation
        set $upstream warehouse_pricing;

        mirror /_get_request_body;        # Force early read

        client_body_in_single_buffer on;  # Minimize memory copy operations on request body
        client_body_buffer_size      16k; # Largest body to keep in memory (before writing to file)
        client_max_body_size         16k;

        # proxy_pass http://$json_validated$request_uri; # Cannot append $request_uri, othewise 404 will be caused
        proxy_pass http://$json_validated;
    }

    return 404; # Catch-all
}

#     # Precise example
#     #
#     location = /api/warehouse/inventory { # Complete inventory
#         proxy_pass http://warehouse_inventory;
#     }
#
#     location ~ ^/api/warehouse/inventory/shelf/[^/]+$ { # Shelf inventory
#         proxy_pass http://warehouse_inventory;
#     }
#
#     location ~ ^/api/warehouse/inventory/shelf/[^/]+/box/[^/]+$ { # Box on shelf
#         proxy_pass http://warehouse_inventory;
#     }
#
#     location ~ ^/api/warehouse/pricing/[^/]+$ { # Price for specific item
#         proxy_pass http://warehouse_pricing;
#     }
